{"version":3,"sources":["api.ts","as/AForm.tsx","as/CreateA.tsx","as/ListA.tsx","as/DetailA.tsx","as/UpdateA.tsx","bs/BForm.tsx","bs/CreateB.tsx","bs/ListB.tsx","bs/DetailB.tsx","bs/UpdateB.tsx","cs/CForm.tsx","cs/CreateC.tsx","cs/ListC.tsx","cs/DetailC.tsx","cs/UpdateC.tsx","ds/DForm.tsx","ds/CreateD.tsx","ds/ListD.tsx","ds/DetailD.tsx","ds/UpdateD.tsx","users/UserForm.tsx","users/CreateUser.tsx","users/ListUser.tsx","users/DetailUser.tsx","users/UpdateUser.tsx","auth/LoginForm.tsx","auth/RegisterForm.tsx","App.tsx","index.tsx"],"names":["CSRF_TOKEN_NAME","CSRF_HEADER_NAME","cookie","name","document","split","find","entry","client","axios","create","headers","value","reduce","AForm","a","onSubmit","initialValues","validate","isSubmitting","type","placeholder","disabled","CreateA","queryClient","useQueryClient","history","useHistory","createA","useMutation","values","post","onSuccess","invalidateQueries","setSubmitting","mutate","push","APreview","handleEdit","handleDelete","handleDetail","onClick","ListAs","asQuery","useQuery","get","then","response","data","deleteA","id","delete","length","map","DetailA","useParams","isLoading","UpdateA","updateA","put","BForm","b","CreateB","createB","BPreview","ListBs","bsQuery","deleteB","DetailB","UpdateB","updateB","CForm","c","CreateC","createC","CPreview","ListCs","csQuery","deleteC","DetailC","UpdateC","updateC","DForm","d","CreateD","createD","DPreview","ListDs","dsQuery","deleteD","DetailD","UpdateD","updateD","UserForm","user","username","passwordHash","CreateUser","createUser","UserPreview","ListUsers","usersQuery","deleteUser","DetailUser","UpdateUser","updateUser","Login","useState","error","setError","handleError","message","handleSubmit","password","Register","api","email","passwordConfirm","App","retry","useEffect","defaults","catch","console","warn","className","to","path","component","ListA","ListB","ListC","ListD","ListUser","LoginForm","RegisterForm","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","getElementById"],"mappings":"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","file":"static/js/main.c25409dc.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst CSRF_TOKEN_NAME = 'csrf-token'\nconst CSRF_HEADER_NAME = 'CSRF-Token'\n\n/**\n * cookie\n * Returns the value of the first cookie matching name `name`\n * or undefined.\n */\nexport function cookie(name: string): string | undefined {\n  // Inspired from\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#example_2_get_a_sample_cookie_named_test2\n  return document.cookie\n    .split('; ')\n    .find((entry) => entry?.split('=')[0] === name)\n    ?.split('=')[1]\n}\n\nexport function hasCSRFToken() {\n  return cookie(CSRF_TOKEN_NAME)\n}\n\nexport function fetchCSRFToken() {\n  client\n    .get('/auth/csrf')\n    .then(() => {\n      client.defaults.headers[CSRF_HEADER_NAME] = cookie(CSRF_TOKEN_NAME)\n    })\n    .catch((error) => {\n      console.warn('Received error while fetching CSRF token :', error)\n    })\n}\n\ntype HeaderEntry = {\n  [name: string]: string\n}\n\nconst client = axios.create({\n  headers: [\n    {\n      name: CSRF_HEADER_NAME,\n      value: cookie(CSRF_TOKEN_NAME),\n    },\n  ].reduce<HeaderEntry>((headers, entry) => {\n    if (entry.value) {\n      headers[entry.name] = entry.value\n    }\n    return headers\n  }, {}),\n})\n\nexport default client\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { A } from '../types'\n\ntype CreateProps = {\n  a?: A\n  onSubmit: (values: A, helpers: FormikHelpers<A>) => void\n}\n\nfunction AForm({ a, onSubmit }: CreateProps) {\n  const initialValues: A = {\n    a: a ? a.a : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='a' placeholder='A' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default AForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { A, AError } from '../types'\nimport AForm from './AForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateA() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createA = useMutation<A, AError, A>(\n    (values) => {\n      return client.post('/api/v1/as', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('as')\n      },\n    }\n  )\n\n  const handleSubmit = (values: A, { setSubmitting }: FormikHelpers<A>) => {\n    createA.mutate(values)\n    setSubmitting?.(false)\n    history.push('/as')\n  }\n\n  return <AForm onSubmit={handleSubmit} />\n}\n\nexport default CreateA\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { A } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype APreviewProps = {\n  a: A\n  handleEdit: (a: A) => void\n  handleDelete: (a: A) => void\n  handleDetail: (a: A) => void\n}\n\nfunction APreview({\n  a,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: APreviewProps) {\n  return (\n    <>\n      {a.a}\n      <br />\n      <button type='button' onClick={() => handleDetail(a)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(a)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(a)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListAs() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const asQuery = useQuery<A[]>('as', () => {\n    return client\n      .get('/api/v1/as')\n      .then((response) => response.data) as Promise<A[]>\n  })\n\n  const deleteA = useMutation<any, any, Partial<A>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/as/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('as')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: A) => {\n    history.push(`/as/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: A) => {\n    deleteA.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: A) => {\n    history.push(`/as/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{asQuery.data?.length} as</p>\n      <ul>\n        {asQuery.data?.map((a) => (\n          <li key={a.id}>\n            <APreview\n              a={a}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListAs\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { A } from '../types'\n\nfunction DetailA() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<A>(['as', id], () =>\n    client.get(`/api/v1/as/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const a = data as A\n\n  return (\n    <div>\n      <label>{a.a}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailA\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport AForm from './AForm'\nimport { A } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateA() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<A>(['as', id], () =>\n    client.get(`/api/v1/as/${id}`).then((response) => response.data)\n  )\n\n  const updateA = useMutation<A, any, A>(\n    (values: A) =>\n      client.put(`/api/v1/as/${id}`, values).then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('as')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const a = data as A\n  return (\n    <AForm\n      a={a}\n      onSubmit={(values, { setSubmitting }) => {\n        updateA.mutate(values)\n        setSubmitting?.(false)\n        history.push('/as')\n      }}\n    />\n  )\n}\n\nexport default UpdateA\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { B } from '../types'\n\ntype CreateProps = {\n  b?: B\n  onSubmit: (values: B, helpers: FormikHelpers<B>) => void\n}\n\nfunction BForm({ b, onSubmit }: CreateProps) {\n  const initialValues: B = {\n    b: b ? b.b : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='b' placeholder='B' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default BForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { B, BError } from '../types'\nimport BForm from './BForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateB() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createB = useMutation<B, BError, B>(\n    (values) => {\n      return client.post('/api/v1/bs', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('bs')\n      },\n    }\n  )\n\n  const handleSubmit = (values: B, { setSubmitting }: FormikHelpers<B>) => {\n    createB.mutate(values)\n    setSubmitting?.(false)\n    history.push('/bs')\n  }\n\n  return <BForm onSubmit={handleSubmit} />\n}\n\nexport default CreateB\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { B } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype BPreviewProps = {\n  b: B\n  handleEdit: (b: B) => void\n  handleDelete: (b: B) => void\n  handleDetail: (b: B) => void\n}\n\nfunction BPreview({\n  b,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: BPreviewProps) {\n  return (\n    <>\n      {b.b}\n      <br />\n      <button type='button' onClick={() => handleDetail(b)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(b)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(b)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListBs() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const bsQuery = useQuery<B[]>('bs', () => {\n    return client\n      .get('/api/v1/bs')\n      .then((response) => response.data) as Promise<B[]>\n  })\n\n  const deleteB = useMutation<any, any, Partial<B>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/bs/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('bs')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: B) => {\n    history.push(`/bs/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: B) => {\n    deleteB.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: B) => {\n    history.push(`/bs/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{bsQuery.data?.length} bs</p>\n      <ul>\n        {bsQuery.data?.map((b) => (\n          <li key={b.id}>\n            <BPreview\n              b={b}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListBs\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { B } from '../types'\n\nfunction DetailB() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<B>(['bs', id], () =>\n    client.get(`/api/v1/bs/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const b = data as B\n\n  return (\n    <div>\n      <label>{b.b}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailB\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport BForm from './BForm'\nimport { B } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateB() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<B>(['bs', id], () =>\n    client.get(`/api/v1/bs/${id}`).then((response) => response.data)\n  )\n\n  const updateB = useMutation<B, any, B>(\n    (values: B) =>\n      client.put(`/api/v1/bs/${id}`, values).then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('bs')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const b = data as B\n  return (\n    <BForm\n      b={b}\n      onSubmit={(values, { setSubmitting }) => {\n        updateB.mutate(values)\n        setSubmitting?.(false)\n        history.push('/bs')\n      }}\n    />\n  )\n}\n\nexport default UpdateB\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { C } from '../types'\n\ntype CreateProps = {\n  c?: C\n  onSubmit: (values: C, helpers: FormikHelpers<C>) => void\n}\n\nfunction CForm({ c, onSubmit }: CreateProps) {\n  const initialValues: C = {\n    c: c ? c.c : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='c' placeholder='C' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default CForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { C, CError } from '../types'\nimport CForm from './CForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateC() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createC = useMutation<C, CError, C>(\n    (values) => {\n      return client.post('/api/v1/cs', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('cs')\n      },\n    }\n  )\n\n  const handleSubmit = (values: C, { setSubmitting }: FormikHelpers<C>) => {\n    createC.mutate(values)\n    setSubmitting?.(false)\n    history.push('/cs')\n  }\n\n  return <CForm onSubmit={handleSubmit} />\n}\n\nexport default CreateC\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { C } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype CPreviewProps = {\n  c: C\n  handleEdit: (c: C) => void\n  handleDelete: (c: C) => void\n  handleDetail: (c: C) => void\n}\n\nfunction CPreview({\n  c,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: CPreviewProps) {\n  return (\n    <>\n      {c.c}\n      <br />\n      <button type='button' onClick={() => handleDetail(c)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(c)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(c)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListCs() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const csQuery = useQuery<C[]>('cs', () => {\n    return client\n      .get('/api/v1/cs')\n      .then((response) => response.data) as Promise<C[]>\n  })\n\n  const deleteC = useMutation<any, any, Partial<C>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/cs/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('cs')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: C) => {\n    history.push(`/cs/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: C) => {\n    deleteC.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: C) => {\n    history.push(`/cs/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{csQuery.data?.length} cs</p>\n      <ul>\n        {csQuery.data?.map((c) => (\n          <li key={c.id}>\n            <CPreview\n              c={c}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListCs\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { C } from '../types'\n\nfunction DetailC() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<C>(['cs', id], () =>\n    client.get(`/api/v1/cs/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const c = data as C\n\n  return (\n    <div>\n      <label>{c.c}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailC\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport CForm from './CForm'\nimport { C } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateC() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<C>(['cs', id], () =>\n    client.get(`/api/v1/cs/${id}`).then((response) => response.data)\n  )\n\n  const updateC = useMutation<C, any, C>(\n    (values: C) =>\n      client.put(`/api/v1/cs/${id}`, values).then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('cs')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const c = data as C\n  return (\n    <CForm\n      c={c}\n      onSubmit={(values, { setSubmitting }) => {\n        updateC.mutate(values)\n        setSubmitting?.(false)\n        history.push('/cs')\n      }}\n    />\n  )\n}\n\nexport default UpdateC\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { D } from '../types'\n\ntype CreateProps = {\n  d?: D\n  onSubmit: (values: D, helpers: FormikHelpers<D>) => void\n}\n\nfunction DForm({ d, onSubmit }: CreateProps) {\n  const initialValues: D = {\n    d: d ? d.d : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='d' placeholder='D' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default DForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { D, DError } from '../types'\nimport DForm from './DForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateD() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createD = useMutation<D, DError, D>(\n    (values) => {\n      return client.post('/api/v1/ds', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('ds')\n      },\n    }\n  )\n\n  const handleSubmit = (values: D, { setSubmitting }: FormikHelpers<D>) => {\n    createD.mutate(values)\n    setSubmitting?.(false)\n    history.push('/ds')\n  }\n\n  return <DForm onSubmit={handleSubmit} />\n}\n\nexport default CreateD\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { D } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype DPreviewProps = {\n  d: D\n  handleEdit: (d: D) => void\n  handleDelete: (d: D) => void\n  handleDetail: (d: D) => void\n}\n\nfunction DPreview({\n  d,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: DPreviewProps) {\n  return (\n    <>\n      {d.d}\n      <br />\n      <button type='button' onClick={() => handleDetail(d)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(d)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(d)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListDs() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const dsQuery = useQuery<D[]>('ds', () => {\n    return client\n      .get('/api/v1/ds')\n      .then((response) => response.data) as Promise<D[]>\n  })\n\n  const deleteD = useMutation<any, any, Partial<D>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/ds/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('ds')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: D) => {\n    history.push(`/ds/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: D) => {\n    deleteD.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: D) => {\n    history.push(`/ds/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{dsQuery.data?.length} ds</p>\n      <ul>\n        {dsQuery.data?.map((d) => (\n          <li key={d.id}>\n            <DPreview\n              d={d}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListDs\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { D } from '../types'\n\nfunction DetailD() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<D>(['ds', id], () =>\n    client.get(`/api/v1/ds/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const d = data as D\n\n  return (\n    <div>\n      <label>{d.d}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailD\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport DForm from './DForm'\nimport { D } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateD() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<D>(['ds', id], () =>\n    client.get(`/api/v1/ds/${id}`).then((response) => response.data)\n  )\n\n  const updateD = useMutation<D, any, D>(\n    (values: D) =>\n      client.put(`/api/v1/ds/${id}`, values).then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('ds')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const d = data as D\n  return (\n    <DForm\n      d={d}\n      onSubmit={(values, { setSubmitting }) => {\n        updateD.mutate(values)\n        setSubmitting?.(false)\n        history.push('/ds')\n      }}\n    />\n  )\n}\n\nexport default UpdateD\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { User } from '../types'\n\ntype CreateProps = {\n  user?: User\n  onSubmit: (values: User, helpers: FormikHelpers<User>) => void\n}\n\nfunction UserForm({ user, onSubmit }: CreateProps) {\n  const initialValues: User = {\n    username: user ? user.username : '',\n    passwordHash: user ? user.passwordHash : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n\n          <Field type='text' name='passwordHash' placeholder='PasswordHash' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default UserForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { User, UserError } from '../types'\nimport UserForm from './UserForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateUser() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createUser = useMutation<User, UserError, User>(\n    (values) => {\n      return client.post('/api/v1/users', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: User,\n    { setSubmitting }: FormikHelpers<User>\n  ) => {\n    createUser.mutate(values)\n    setSubmitting?.(false)\n    history.push('/users')\n  }\n\n  return <UserForm onSubmit={handleSubmit} />\n}\n\nexport default CreateUser\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { User } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype UserPreviewProps = {\n  user: User\n  handleEdit: (user: User) => void\n  handleDelete: (user: User) => void\n  handleDetail: (user: User) => void\n}\n\nfunction UserPreview({\n  user,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: UserPreviewProps) {\n  return (\n    <>\n      {user.username}\n      <br />\n      <button type='button' onClick={() => handleDetail(user)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(user)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(user)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListUsers() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const usersQuery = useQuery<User[]>('users', () => {\n    return client\n      .get('/api/v1/users')\n      .then((response) => response.data) as Promise<User[]>\n  })\n\n  const deleteUser = useMutation<any, any, Partial<User>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/users/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: User) => {\n    history.push(`/users/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: User) => {\n    deleteUser.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: User) => {\n    history.push(`/users/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{usersQuery.data?.length} users</p>\n      <ul>\n        {usersQuery.data?.map((user) => (\n          <li key={user.id}>\n            <UserPreview\n              user={user}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListUsers\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { User } from '../types'\n\nfunction DetailUser() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n\n  return (\n    <div>\n      <label>{user.username}</label>\n      <br />\n\n      <label>{user.passwordHash}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailUser\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport UserForm from './UserForm'\nimport { User } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateUser() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  const updateUser = useMutation<User, any, User>(\n    (values: User) =>\n      client\n        .put(`/api/v1/users/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n  return (\n    <UserForm\n      user={user}\n      onSubmit={(values, { setSubmitting }) => {\n        updateUser.mutate(values)\n        setSubmitting?.(false)\n        history.push('/users')\n      }}\n    />\n  )\n}\n\nexport default UpdateUser\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\n\nimport { LoginValues } from '../types'\nimport client from '../api'\nimport { useHistory } from 'react-router-dom'\nimport { useQueryClient } from 'react-query'\n\nfunction Login() {\n  const [error, setError] = useState<string>('')\n  const history = useHistory()\n  const queryClient = useQueryClient()\n\n  const initialValues: LoginValues = {\n    username: '',\n    password: '',\n  }\n\n  const handleError = (\n    error: any,\n    { setSubmitting }: Partial<FormikHelpers<LoginValues>>\n  ) => {\n    if (error.response && error.response.data) {\n      const { error: message } = error.response.data\n      message && setError(message)\n    }\n    setSubmitting?.(false)\n  }\n\n  const handleSubmit = async (\n    values: LoginValues,\n    { setSubmitting }: FormikHelpers<LoginValues>\n  ) => {\n    try {\n      await client.post('/auth/login', values)\n      setSubmitting?.(false)\n      await queryClient.invalidateQueries('user')\n      history.push('/')\n    } catch (error) {\n      handleError(error, { setSubmitting })\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='password' name='password' placeholder='Password' />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { RegisterValues } from '../types'\nimport api from '../api'\n\nfunction Register() {\n  const [error, setError] = useState<string>('')\n\n  const initialValues: RegisterValues = {\n    username: '',\n    email: '',\n    password: '',\n    passwordConfirm: '',\n  }\n\n  const handleSubmit = async (\n    values: RegisterValues,\n    { setSubmitting }: FormikHelpers<RegisterValues>\n  ) => {\n    try {\n      await api.post('/auth/register', values)\n      setSubmitting?.(false)\n    } catch (error) {\n      if (error.response && error.response.data) {\n        const { error: message } = error.response.data\n        message && setError(message)\n      }\n      setSubmitting?.(false)\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='text' name='email' placeholder='Email' />\n          <Field type='password' name='password' placeholder='Password' />\n          <Field\n            type='password'\n            name='passwordConfirm'\n            placeholder='Confirm password'\n          />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Register\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Register\n","import React, { useEffect } from 'react'\n\nimport CreateA from './as/CreateA'\nimport ListA from './as/ListA'\nimport DetailA from './as/DetailA'\nimport UpdateA from './as/UpdateA'\n\nimport CreateB from './bs/CreateB'\nimport ListB from './bs/ListB'\nimport DetailB from './bs/DetailB'\nimport UpdateB from './bs/UpdateB'\n\nimport CreateC from './cs/CreateC'\nimport ListC from './cs/ListC'\nimport DetailC from './cs/DetailC'\nimport UpdateC from './cs/UpdateC'\n\nimport CreateD from './ds/CreateD'\nimport ListD from './ds/ListD'\nimport DetailD from './ds/DetailD'\nimport UpdateD from './ds/UpdateD'\n\nimport CreateUser from './users/CreateUser'\nimport ListUser from './users/ListUser'\nimport DetailUser from './users/DetailUser'\nimport UpdateUser from './users/UpdateUser'\n\nimport LoginForm from './auth/LoginForm'\nimport RegisterForm from './auth/RegisterForm'\n\nimport { Route, Switch, BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport { useQuery } from 'react-query'\n\nimport client, { fetchCSRFToken, hasCSRFToken } from './api'\n\nfunction App() {\n  const { data: user } = useQuery('user', () => client.get('/auth/me'), {\n    retry: false,\n  })\n\n  useEffect(() => {\n    if (!hasCSRFToken()) fetchCSRFToken()\n  }, [])\n\n  return (\n    <Router>\n      <nav>\n        <ul className='flex'>\n          <li>\n            <Link to='/'>Home</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/login'>Login</Link>\n            <br />\n            <Link to='/register'>Register</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/as'>As</Link>\n            <br />\n            <Link to='/as/create'>Create a A</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/bs'>Bs</Link>\n            <br />\n            <Link to='/bs/create'>Create a B</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/cs'>Cs</Link>\n            <br />\n            <Link to='/cs/create'>Create a C</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/ds'>Ds</Link>\n            <br />\n            <Link to='/ds/create'>Create a D</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/users'>Users</Link>\n            <br />\n            <Link to='/users/create'>Create a User</Link>\n            <br />\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <Route path='/as'>\n          <h1>As</h1>\n        </Route>\n\n        <Route path='/bs'>\n          <h1>Bs</h1>\n        </Route>\n\n        <Route path='/cs'>\n          <h1>Cs</h1>\n        </Route>\n\n        <Route path='/ds'>\n          <h1>Ds</h1>\n        </Route>\n\n        <Route path='/users'>\n          <h1>Users</h1>\n        </Route>\n\n        <Switch>\n          {/* A routes */}\n          <Route path='/as/create' component={CreateA} />\n          <Route path='/as/update/:id' component={UpdateA} />\n          <Route path='/as/detail/:id' component={DetailA} />\n          <Route path='/as' component={ListA} />,{/* B routes */}\n          <Route path='/bs/create' component={CreateB} />\n          <Route path='/bs/update/:id' component={UpdateB} />\n          <Route path='/bs/detail/:id' component={DetailB} />\n          <Route path='/bs' component={ListB} />,{/* C routes */}\n          <Route path='/cs/create' component={CreateC} />\n          <Route path='/cs/update/:id' component={UpdateC} />\n          <Route path='/cs/detail/:id' component={DetailC} />\n          <Route path='/cs' component={ListC} />,{/* D routes */}\n          <Route path='/ds/create' component={CreateD} />\n          <Route path='/ds/update/:id' component={UpdateD} />\n          <Route path='/ds/detail/:id' component={DetailD} />\n          <Route path='/ds' component={ListD} />,{/* User routes */}\n          <Route path='/users/create' component={CreateUser} />\n          <Route path='/users/update/:id' component={UpdateUser} />\n          <Route path='/users/detail/:id' component={DetailUser} />\n          <Route path='/users' component={ListUser} />\n          {/* auth routes */}\n          <Route path='/login' component={LoginForm} />\n          <Route path='/register' component={RegisterForm} />\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}